{
    "type": "reply",
    "tag": "web",
    "difficulty": "1",
    "from": "https://github.com/qiu-deqing/fe-interview",
    "description": "<p>从浏览器地址栏输入url到显示页面的步骤(以HTTP为例)</p>\n",
    "answer": "<ol>\n<li>在浏览器地址栏输入URL</li>\n<li>浏览器查看<strong>缓存</strong>，如果请求资源在缓存中并且新鲜，跳转到转码步骤<ol>\n<li>如果资源未缓存，发起新请求</li>\n<li>如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。</li>\n<li>检验新鲜通常有两个HTTP头进行控制<code>Expires</code>和<code>Cache-Control</code>：<ul>\n<li>HTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期</li>\n<li>HTTP1.1增加了Cache-Control: max-age=,值为以秒为单位的最大新鲜时间</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>浏览器<strong>解析URL</strong>获取协议，主机，端口，path</li>\n<li>浏览器<strong>组装一个HTTP（GET）请求报文</strong></li>\n<li>浏览器<strong>获取主机ip地址</strong>，过程如下：<ol>\n<li>浏览器缓存</li>\n<li>本机缓存</li>\n<li>hosts文件</li>\n<li>路由器缓存</li>\n<li>ISP DNS缓存</li>\n<li>DNS递归查询（可能存在负载均衡导致每次IP不一样）</li>\n</ol>\n</li>\n<li><strong>打开一个socket与目标IP地址，端口建立TCP链接</strong>，三次握手如下：<ol>\n<li>客户端发送一个TCP的<strong>SYN=1，Seq=X</strong>的包到服务器端口</li>\n<li>服务器发回<strong>SYN=1， ACK=X+1， Seq=Y</strong>的响应包</li>\n<li>客户端发送<strong>ACK=Y+1， Seq=Z</strong></li>\n</ol>\n</li>\n<li>TCP链接建立后<strong>发送HTTP请求</strong></li>\n<li>服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用HTTP Host头部判断请求的服务程序</li>\n<li>服务器检查<strong>HTTP请求头是否包含缓存验证信息</strong>如果验证缓存新鲜，返回<strong>304</strong>等对应状态码</li>\n<li>处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作</li>\n<li>服务器将<strong>响应报文通过TCP连接发送回浏览器</strong></li>\n<li>浏览器接收HTTP响应，然后根据情况选择<strong>关闭TCP连接或者保留重用，关闭TCP连接的四次握手如下</strong>：<ol>\n<li>主动方发送<strong>Fin=1， Ack=Z， Seq= X</strong>报文</li>\n<li>被动方发送<strong>ACK=X+1， Seq=Z</strong>报文</li>\n<li>被动方发送<strong>Fin=1， ACK=X， Seq=Y</strong>报文</li>\n<li>主动方发送<strong>ACK=Y， Seq=X</strong>报文</li>\n</ol>\n</li>\n<li>浏览器检查响应状态吗：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同</li>\n<li>如果资源可缓存，<strong>进行缓存</strong></li>\n<li>对响应进行<strong>解码</strong>（例如gzip压缩）</li>\n<li>根据资源类型决定如何处理（假设资源为HTML文档）</li>\n<li><strong>解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本</strong>，这些操作没有严格的先后顺序，以下分别解释</li>\n<li><strong>构建DOM树</strong>：<ol>\n<li><strong>Tokenizing</strong>：根据HTML规范将字符流解析为标记</li>\n<li><strong>Lexing</strong>：词法分析将标记转换为对象并定义属性和规则</li>\n<li><strong>DOM construction</strong>：根据HTML标记关系将对象组成DOM树</li>\n</ol>\n</li>\n<li>解析过程中遇到图片、样式表、js文件，<strong>启动下载</strong></li>\n<li>构建<strong>CSSOM树</strong>：<ol>\n<li><strong>Tokenizing</strong>：字符流转换为标记流</li>\n<li><strong>Node</strong>：根据标记创建节点</li>\n<li><strong>CSSOM</strong>：节点创建CSSOM树</li>\n</ol>\n</li>\n<li><strong><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction\">根据DOM树和CSSOM树构建渲染树</a></strong>:<ol>\n<li>从DOM树的根节点遍历所有<strong>可见节点</strong>，不可见节点包括：1）<code>script</code>,<code>meta</code>这样本身不可见的标签。2)被css隐藏的节点，如<code>display: none</code></li>\n<li>对每一个可见节点，找到恰当的CSSOM规则并应用</li>\n<li>发布可视节点的内容和计算样式</li>\n</ol>\n</li>\n<li><strong>js解析如下</strong>：<ol>\n<li>浏览器创建Document对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时<strong>document.readystate为loading</strong></li>\n<li>HTML解析器遇到<strong>没有async和defer的script时</strong>，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。这样就可以用document.write()把文本插入到输入流中。<strong>同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作script和他们之前的文档内容</strong></li>\n<li>当解析器遇到设置了<strong>async</strong>属性的script时，开始下载脚本并继续解析文档。脚本会在它<strong>下载完成后尽快执行</strong>，但是<strong>解析器不会停下来等它下载</strong>。异步脚本<strong>禁止使用document.write()</strong>，它们可以访问自己script和之前的文档元素</li>\n<li>当文档完成解析，document.readState变成interactive</li>\n<li>所有<strong>defer</strong>脚本会<strong>按照在文档出现的顺序执行</strong>，延迟脚本<strong>能访问完整文档树</strong>，禁止使用document.write()</li>\n<li>浏览器<strong>在Document对象上触发DOMContentLoaded事件</strong></li>\n<li>此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些<strong>内容完成载入并且所有异步脚本完成载入和执行</strong>，document.readState变为complete,window触发load事件</li>\n</ol>\n</li>\n<li><strong>显示页面</strong>（HTML解析过程中会逐步显示页面）</li>\n</ol>\n",
    "options": []
}