{
    "type": "reply",
    "tag": "javascript",
    "difficulty": "1",
    "from": "https://github.com/qiu-deqing/fe-interview",
    "description": "评价一下三种方法实现继承的优缺点,并改进",
    "answer": "```\nfunction Shape() {}\n\nfunction Rect() {}\n\n// 方法1\nRect.prototype = new Shape();\n\n// 方法2\nRect.prototype = Shape.prototype;\n\n// 方法3\nRect.prototype = Object.create(Shape.prototype);\n\nRect.prototype.area = function () {\n  // do something\n};\n```\n\n方法1：\n\n1. 优点：正确设置原型链实现继承\n2. 优点：父类实例属性得到继承，原型链查找效率提高，也能为一些属性提供合理的默认值\n3. 缺点：父类实例属性为引用类型时，不恰当地修改会导致所有子类被修改\n4. 缺点：创建父类实例作为子类原型时，可能无法确定构造函数需要的合理参数，这样提供的参数继承给子类没有实际意义，当子类需要这些参数时应该在构造函数中进行初始化和设置\n5. 总结：继承应该是继承方法而不是属性，为子类设置父类实例属性应该是通过在子类构造函数中调用父类构造函数进行初始化\n\n方法2：\n\n1. 优点：正确设置原型链实现继承\n2. 缺点：父类构造函数原型与子类相同。修改子类原型添加方法会修改父类\n\n方法3：\n\n1. 优点：正确设置原型链且避免方法1.2中的缺点\n2. 缺点：ES5方法需要注意兼容性\n\n改进：\n\n1. 所有三种方法应该在子类构造函数中调用父类构造函数实现实例属性初始化\n\n```\nfunction Rect() {\n    Shape.call(this);\n}\n```\n\n\n2. 用新创建的对象替代子类默认原型，设置``Rect.prototype.constructor = Rect;``保证一致性\n3. 第三种方法的polyfill：\n\n```\nfunction create(obj) {\n    if (Object.create) {\n        return Object.create(obj);\n    }\n\n    function f() {};\n    f.prototype = obj;\n    return new f();\n}\n```\n\n## $javascript编程部分",
    "options": []
}