{
    "type": "reply",
    "tag": "javascript",
    "difficulty": "1",
    "from": "https://github.com/hawx1993/front-end-interview-questions",
    "description": "解析一个完整的url,返回Object包含域与window.location相同",
    "answer": "```\n/**\n * 解析一个url并生成window.location对象中包含的域\n * location:\n * {\n *      href: '包含完整的url',\n *      origin: '包含协议到pathname之前的内容',\n *      protocol: 'url使用的协议，包含末尾的:',\n *      username: '用户名', // 暂时不支持\n *      password: '密码',  // 暂时不支持\n *      host: '完整主机名，包含:和端口',\n *      hostname: '主机名，不包含端口'\n *      port: '端口号',\n *      pathname: '服务器上访问资源的路径/开头',\n *      search: 'query string，?开头',\n *      hash: '#开头的fragment identifier'\n * }\n *\n * @param {string} url 需要解析的url\n * @return {Object} 包含url信息的对象\n */\nfunction parseUrl(url) {\n    var result = {};\n    var keys = ['href', 'origin', 'protocol', 'host',\n                'hostname', 'port', 'pathname', 'search', 'hash'];\n    var i, len;\n    var regexp = /(([^:]+:)\\/\\/(([^:\\/\\?#]+)(:\\d+)?))(\\/[^?#]*)?(\\?[^#]*)?(#.*)?/;\n\n    var match = regexp.exec(url);\n\n    if (match) {\n        for (i = keys.length - 1; i >= 0; --i) {\n            result[keys[i]] = match[i] ? match[i] : '';\n        }\n    }\n\n    return result;\n}\n```",
    "options": []
}